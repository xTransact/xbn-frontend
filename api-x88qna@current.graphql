
type NFTAssetEdge {
    node: NFTAsset
    cursor: Cursor!
}

type NFTAssetConnection {
    edges: [NFTAssetEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

enum NFTAssetOrderByField {
    RANDOM
    CREATED_AT
    PRICE
    RARITY
    LIKES
}

input NFTAssetOrderBy {
    direction: OrderDirection!
    field: NFTAssetOrderByField!
}

enum AssetType {
    New
    Hot
    Top
}

type NFTAsset implements Node {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    assetContractAddress: String!
    tokenID: String!
    imageUrl: String!
    imagePreviewUrl: String!
    imageThumbnailUrl: String!
    imageOriginalUrl: String!
    animationUrl: String!
    animationOriginalUrl: String!
    backgroundColor: String!
    name: String!
    description: String!
    externalLink: String!
    creator: String!
    owner: String!
    transferFee: String!
    transferFeePaymentToken: String!
    orderChain: String!
    orderCoin: String!
    orderPrice: Decimal!
    rarity: Float!
    rarityRank: Int!
    rarityLevel: String!
    chain: String!
    nftAssetMetaData: NFTAssetMetaData!
    "asset 关联的合约地址"
    nftAssetContract: NFTAssetContract!
    "asset 关联特征"
    nftAssetTraits: [NFTAssetTrait!]
}

type NFTOrder {
    id: ID!
    assetContractAddress: String!
    tokenId: String!
    orderHash: String!
    side: String!
    orderType: String!
    maker: String!
    taker: String!
    price: Decimal!
    cancelled: Boolean!
    finalized: Boolean!
    orderCreatedAt: Time!
    closeAt: Time!
    updatedAt: Time!
    nftPaymentToken: NFTPaymentToken!
}

type NFTAssetTrait {
    id: ID!
    traitType: String!
    value: String!
    rarity: Float!
    percentage: Float!
}

enum NFTAssetStatus {
    BUY_NOW
    ON_AUCTION
    HAS_OFFERS
}

input NFTAssetWhere {
    "价格大于等于"
    priceGTE: Float
    "价格小于等于"
    priceLTE: Float
    "产品运营配置的 collectionId"
    famous: [ID!]
    "asset 的状态"
    status: [NFTAssetStatus!]
    "asset 特征"
    traitType: String
    "asset 特征值"
    traitTypeValue: [String!]
    "认证状态筛选条件"
    isVerified: Boolean
    "货币筛选"
    CryptoCurrency: [String!]
}

type NFTAssetContract {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    address: String!
    assetContractType: String!
    createdDate: String!
    name: String!
    nftVersion: String!
    openseaVersion: String!
    schemaName: String!
    symbol: String!
    totalSupply: String!
    description: String!
    externalLink: String!
    imageUrl: String!
    openseaBuyerFeeBasisPoints: Int!
    openseaSellerFeeBasisPoints: Int!
    buyerFeeBasisPoints: Int!
    sellerFeeBasisPoints: Int!
    payoutAddress: String!
}

type NFTAssetMetaData {
    "是否点赞"
    like: Boolean!
    "点赞数"
    likeCount: Int!
}

type NFTAssetProperty {
    "asset 特征"
    trait_type: String!
    "asset 特征值"
    value: String!
    "数量"
    count: Int!
}

type NFTAssetOrderEdge {
    node: NFTOrder
    cursor: Cursor!
}

type NFTAssetOrderConnection {
    edges: [NFTAssetOrderEdge]
    pageInfo: PageInfo!
}

enum NFTAssetOrderType {
    "卖单"
    LISTINGS
}

input NFTAssetOrderWhere {
    orderType: NFTAssetOrderType
}


enum BuyYouFirstNFTLabel {
    MOST_FAMOUS
    BELOW_5
    HOT
}

type BuyYouFirstNFT {
    "asset 标签"
    label: BuyYouFirstNFTLabel!
    nftAsset: [NFTAsset!]
}

extend type Query {
    "通过 asset id 获取 asset 实体"
    asset(
        id: ID
        "如果传递了合约地址和 TokenID，优先会选择这两个进行查询"
        assetContractAddress: String
        assetTokenID: String
    ): NFTAsset!
    "通过条件和排序获取 assets，主要为 Art 等常规标签"
    assets(
        first: Int
        after: Cursor
        tag: String!
        orderBy: NFTAssetOrderBy!
        where: NFTAssetWhere
    ): NFTAssetConnection!
    "获取 Hot，Top 等特殊标签下的 assets"
    assetsChannel(
        first: Int
        after: Cursor
        tags: [String!],
        assetType: AssetType!,
        orderBy: NFTAssetOrderBy!
        where: NFTAssetWhere
    ): NFTAssetConnection!
    "获取点赞上升速度最快的 assets"
    fastestRisingAssets(pageSize: Int!, offset: Int!): [NFTAsset]!
    "collection 收藏数排名在前10的 assets"
    popularAssets(pageSize:Int!, lastId: ID):[NFTAsset]!
    "Buy you first NFTs"
    buyYouFirstNFTs:[BuyYouFirstNFT]!
    "根据 collection_id 获取特征值集合"
    assetProperties(collectID: ID!): [NFTAssetProperty!]
    "通过 asset id 获取 asset orders"
    assetOrders(
        first: Int
        after: Cursor
        assetID: ID
        "如果传递了合约地址和 TokenID，优先会选择这两个进行查询"
        assetContractAddress: String
        assetTokenID: String
        where: NFTAssetOrderWhere
        "传递为 true 时，后台会进行此 asset orders 的更新操作"
        withUpdate: Boolean
    ): NFTAssetOrderConnection!
    "获取收藏 asset 列表"
    favoriteAssets(first: Int, after: Cursor): NFTAssetConnection!
    "ForU 标签下的 assets"
    forU(
        first: Int
        after: Cursor
        tags: [String!]
        orderBy: NFTAssetOrderBy!
        where: NFTAssetWhere
    ): NFTAssetConnection!
}

extend type Mutation {
    "点赞"
    likeAsset(
        assetId: ID
        "如果传递了合约地址和 TokenID，优先会选择这两个进行查询"
        assetContractAddress: String
        assetTokenID: String
    ): Boolean!
    "取消点赞"
    unLikeAsset(
        assetId: ID
        "如果传递了合约地址和 TokenID，优先会选择这两个进行查询"
        assetContractAddress: String
        assetTokenID: String
    ): Boolean!
}



enum NFTCollectionOrderField {
    CREATED_AT
}

input NFTCollectionOrder {
    direction: OrderDirection!
    field: NFTCollectionOrderField
}

type NFTCollectionEdge {
    node: NFTCollection
    cursor: Cursor!
}

type NFTCollectionConnection {
    totalCount: Int!
    pageInfo: PageInfo!
    edges: [NFTCollectionEdge]
}

enum NFTConnectionOrderByField {
    "创建时间"
    CREATED_AT
    "地板价"
    FLOOR_PRICE
    "24h 地板价变化率"
    FLOOR_PRICE_RATE
}

type NFTCollectionFee {
    "酬金名称"
    name: String!
    "酬金地址"
    address: String!
    "酬金比例 250 => 2.5%"
    value: Int!
}

input NFTConnectionOrderBy {
    direction: OrderDirection!
    field: NFTConnectionOrderByField!
}

type NFTCollection implements Node {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    slug: String!
    description: String!
    name: String!
    shortDescription: String!
    bannerImageUrl: String!
    chatUrl: String!
    discordUrl: String!
    externalUrl: String!
    featuredImageUrl: String!
    safelistRequestStatus: String!
    imageUrl: String!
    imagePreviewUrl: String!
    imageThumbnailUrl: String!
    largeImageUrl: String!
    openseaBuyerFeeBasisPoints: String!
    openseaSellerFeeBasisPoints: String!
    payoutAddress: String!
    telegramUrl: String!
    twitterUsername: String!
    instagramUsername: String!
    wikiUrl: String!
    mediumUsername: String!
    createdDate: Time!
    onlyProxiedTransfers: Boolean!
    subscriberCount: Int!
    assetsCount: Int!
    fees: [NFTCollectionFee!]
    nftCollectionMetaData: NFTCollectionMetaData!
    "collection 的统计"
    nftCollectionStat: NFTCollectionStat!
}

type NFTCollectionStat {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    oneDayVolume: Float!
    oneDayChange: Float!
    oneDaySales: Int!
    oneDayAveragePrice: Float!
    sevenDayVolume: Float!
    sevenDayChange: Float!
    sevenDaySales: Int!
    sevenDayAveragePrice: Float!
    thirtyDayVolume: Float!
    thirtyDayChange: Float!
    thirtyDaySales: Int!
    thirtyDayAveragePrice: Float!
    totalVolume: Float!
    totalSales: Int!
    totalSupply: Int!
    count: Int!
    numOwners: Int!
    averagePrice: Float!
    numReports: Int!
    marketCap: Float!
    floorPrice: Float!
    "地板价 24h 变化率"
    floorPriceRate: Float!
}

input NFTCollectionWhere {
    "collection 地板价下限"
    FloorPriceGTE: Float
    "collection 地板价上限"
    FloorPriceLTE: Float
    "产品运营配置的 collectionId"
    Famous: [ID!]
    "币种"
    CryptoCurrency: [String!]
    "collection系列assets数量下限"
    AssetsCountGTE: Int
    "collection系列assets数量上限"
    AssetsCountLTE: Int
}

type NFTCollectionMetaData {
    "collection 是否订阅"
    subscribe: Boolean!
    "collection 订阅数"
    subscribeCount: Int!
}

type NFTSubscribedAsset {
    collectionId: ID!
    nftAssets: [NFTAsset!]
}

type NFTFamous {
    "collection 的 id"
    id: ID!
    "collection 的 name"
    name: String!
    "collection 的 image_url"
    image_url: String!
    "collection 的 tags"
    tags: [String!]
}

extend type Query {
    "获取用户订阅列表"
    nftSubscriptionCollection(
        after: Cursor
        first: Int
        tags: [String!],
        status: [String!],
        orderBy: NFTConnectionOrderBy!
        where: NFTCollectionWhere
    ): NFTCollectionConnection!
    "通过 collectionId 或 assetId 或 assetContractAddress和assetTokenID 获取collection实体"
    nftCollection(
        collectionId: ID
        assetId: ID
        assetContractAddress: String
        assetTokenID: String
    ): NFTCollection!
    "通过 collectionId 获取其系列下的 asset列表"
    nftCollectionAssets(collectionID: ID!, first: Int, after: Cursor, orderBy: NFTAssetOrderBy!, where: NFTAssetWhere): NFTAssetConnection!
    "通过 collectionId 和 asset的name或token_id 精确搜索asset实体"
    nftCollectionSearchAsset(collectionId: ID!, search: String!): NFTAsset!
    "获取运营配置的 collection 列表"
    nftCollectionByFamous: [NFTFamous!]
    "获取订阅的 collection 下的 asset 列表"
    nftCollectionSubscribedAssets(collectionID: [ID!]): [NFTSubscribedAsset!]
    "随机获取 collection"
    nftCollectionByRandom(
        assetID: ID,
        assetContractAddress: String
        assetTokenID: String
        first: Int
        after: Cursor
    ): NFTCollectionConnection!
}

extend type Mutation {
    "用户订阅 collection"
    subscribeCollection(collection_id: ID!): Boolean!
    "用户取消订阅 collection"
    unSubscribeCollection(collection_id: ID!): Boolean!
}

type PageInfo {
    hasNextPage: Boolean!
    endCursor: Cursor
}

enum OrderDirection {
    ASC
    DESC
}

"gas price 统计"
type GasPriceStatistic {
    "过去 7 天最小值"
    lowest: Int!
    "对应 https://etherscan.io/gastracker 中的 Low"
    low : Int!
    "对应 https://etherscan.io/gastracker 中的 Average"
    average: Int!
    "对应 https://etherscan.io/gastracker 中的 High"
    high: Int!
    "opensea 合约预估使用量"
    gasLimit: Int!
    "最终 gasFee 计算值对应的大小阈值，单位为美元"
    gasFeeThreshold: Float!
}

extend type Query {
    """获取实时 gas price 统计信息，后台一分钟更新一次，前端按需调整"""
    gasPrice: GasPriceStatistic!
}

type MarketStats {
    name: String!
    symbol: String!
    slug: String!
    price: Float!
    percentChange24h: Float!
    marketCap: Float!
    volume: Float!
    maxSupply: Float!
}

extend type Query {
    """
    主要用于 Web3 Square 下的市场数据
    slug: 平台唯一标识符，对于以下链接，slug 为 ethereum-name-service
    https://coinmarketcap.com/currencies/ethereum-name-service/
    """
    marketStats(slug: String!): MarketStats!
}

interface Node {
    id: ID!
}

type NFTPaymentToken {
    id: ID!
    "币种名"
    name: String!
    "链名"
    chain: String!
    "币名"
    coin: String!
    "精度位数"
    decimals: Int!
    "地址"
    address: String!
}

extend type Query {
    "获取所有 nft_payment_token"
    nftPaymentToken: [NFTPaymentToken!]
}

extend type Query {
    "查询是否关闭购买开关，os 传枚举，version 传送版本号，如 2.9.1"
    isTurnOnPurchase(os: OS!, version: String!): Boolean!
}

enum OS {
    ANDROID
    IOS
}

"""Maps a Time GraphQL scalar to a Go time.Time struct."""
scalar Time

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

"""Maps a Decimal GraphQL scalar to a Decimal struct."""
scalar Decimal

type Query {
    """Node"""
    node(id: ID!): Node
    nodes(ids: [ID!]!): [Node]!
}

type Mutation

extend type Query {
    "assets 模糊搜索"
    searchNFTAssets(
        first: Int
        after: Cursor
        query: String!
    ): NFTAssetConnection!
    "collections 模糊搜索"
    searchNFTCollections(
        first: Int,
        after: Cursor,
        query: String!
    ): NFTCollectionConnection!
    "历史搜索结果排名前 20 的搜索记录"
    topSearches: [String!]
}

type Web3Square {
    id: ID!
    createdAt: Time!
    updatedAt: Time!
    projectName: String!
    projectDescription:String!
    projectBanner:String!
    followers: Int!
    preOrders: Int!
    members: Int!
    topSales: [String!]
    medium: String!
    twitter: String!
    externalURL: String!
    discordURL: String!
    linkedinURL: String!
    tokenName: String!
    token: String!
    benefits: String!
    getStarted: String!
}

type Web3SquareEdge {
    node: Web3Square
    cursor: Cursor!
}

type Web3SquareConnection {
    edges: [Web3SquareEdge]
    pageInfo: PageInfo!
}

extend type Query {
    "根据 id 获取 web3_square 数据"
    web3Square(id: ID!): Web3Square!
    "分页获取 web3_square 数据"
    web3Squares(first: Int, after: Cursor): Web3SquareConnection!
}
